#ifndef __PFFUNCTIONS_H__
#define __PFFUNCTIONS_H__

#include "BaseAgent.h"
#include <BWAPI.h>

/** Helper class for the PFManager. Contains methods to calculate the potentials generated by own units, enemy units
 * and neutral objects in specific points.
 *
 * Author: Johan Hagelback (johan.hagelback@gmail.com)
 */
class PFFunctions {

private:
	static int getSize(BWAPI::UnitType type);

public:

	/** Returns the distance between two positions. */
	static float getDistance(BWAPI::Position p1, BWAPI::Position p2);

	/** Returns the distance between a unit and a position. */
	static float getDistance(BWAPI::Position pos, BWAPI::Unit* unit);

	/** Calculates the potential otherOwnUnit generates around unit at distance d. */
	static float calcOwnUnitP(float d, BWAPI::Unit* unit, BWAPI::Unit* otherOwnUnit);

	/** Calculates the potential own workers generate around themselves. Used to avoid collision
	 * at chokepoints. */
	static float calcAvoidWorkerP(float d, BaseAgent* unit, BaseAgent* oUnit);

	/** Calculates the potential a Spider Mine generates around unit at distance d. */
	static float calcMineP(float d, BWAPI::Unit* unit);
	
	/** Calculates the general potential field value at distance d used when moving towards a point. */
	static float calcNavigationP(float d);

	/** Returns the total potential for navigating from cPos to goal. */
	static float getNavigationP(BWAPI::Position cPos, BWAPI::Position goal);

	/** Calculates the potential an attacking unit generates at distance d around an enemy unit. */
	static float calcAttackingUnitP(float d, BWAPI::Unit* attacker, BWAPI::Unit* enemy, bool defensive);

	/** Calculates the potential a defensive unit generates at distance d around an enemy unit. */
	static float calcDefensiveUnitP(float d, BWAPI::Unit* ownUnit, BWAPI::Unit* enemy);

	/** Returns true if the own unit can attack the target. */
	static bool canAttack(BWAPI::Unit* ownUnit, BWAPI::Unit* target);
	
};

#endif
