[game]
; speed: Less is faster, 0 is as fast as it can go. Seems less is not
; always faster, 0 is at least fastest. -1 is starcraft original game speed.
; The speed can be changed in game using /speed # command, where # is the number.
speed 	= 8



[debug]
; Fancy debug graphics
; 0 off, 1 = low, 2 = medium, 3 = high
graphics_text_verbosity_in_debug 	= 2
graphics_text_verbosity_in_release 	= 0



[squad]
ping_wait_time_first 		= 2	; Time to wait for first ping
ping_wait_time_after_first 	= 1.5	; Time to wait for pings after first

; The distance away from the center a unit has to be until a regroup occurs.
; If a unit is further than this the entire squad will get a regroup goal to the center of the
; squad to regroup
regroup_distance_begin		= 10.0

; The distance away from the center of the squad until a regroup is considered to be done.
regroup_distance_end		= 7.0

; Time before trying with a new regroup position when a unit is still, in seconds.
regroup_new_position_time	= 1.5

; How long time before recalculating the distance to the unit furthest away from the squad
calc_furthest_away_time		= 1.0	

; Default range when calculating distance betweer the center  of the squad and a position
; to test whether the squad is close to this position or not.
close_distance = 8.0


[squad.attack]
; Distance from goal until we create a waiting distance. Ground squads use ground distance.
waiting_position_distance_from_goal = 25.0

; Distance from goal position to check if all buildings have been destroyed to complete the goal.
structures_destroyed_goal_distance = 15.0



; How often managers shall be called
[frame_distribution]
; Calculates the forces, note that it only calculates our, the enemy, and teammate
; player every third time of this. Meaning it calculates our forces every X * 3 frames.
exploration_manager		= 61
resource_counter		= 23



[attack_coordinator]
expansion_not_checked_time = 60		; In seconds
wait_goal_timeout = 30			; In seconds


; Note that weights are multiplied, meaning the difference between 0.1 and 0.2 is just
; as much as 0.5 and 1.0 
[attack_coordinator.weights]
expansion_not_checked = 1.0		; Not checked expansions
expansion_max = 1.0			; This is not the same as not checked expansions weight.

; Minimum weight of existing expansions. The real weight depends on the how fresh the expansion is.
expansion_min = 0.0

; If expansion shall be ceiled. 
expansion_ceil = true
addon_structure = 0.4
supply_structure = 0.35
upgrade_structure = 0.3
unit_producing_structure = 0.2
other_structure = 0.1
